=begin
#iDroit Dashboard Admin API

#     これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   

OpenAPI spec version: 0.9.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

module SwaggerClient
  class GroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # グループへのDID情報紐付け
    # グループにDID情報を紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_connect_did_infos(body, id, opts = {})
      data, _status_code, _headers = groups_controller_connect_did_infos_with_http_info(body, id, opts)
      data
    end

    # グループへのDID情報紐付け
    # グループにDID情報を紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_connect_did_infos_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_connect_did_infos ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling GroupsApi.groups_controller_connect_did_infos"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_connect_did_infos"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/did-infos'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_connect_did_infos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループへのユーザーアカウント紐付け
    # グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_connect_users(body, id, opts = {})
      data, _status_code, _headers = groups_controller_connect_users_with_http_info(body, id, opts)
      data
    end

    # グループへのユーザーアカウント紐付け
    # グループの所有者、関係者などの管理者としてユーザーアカウントを紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_connect_users_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_connect_users ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling GroupsApi.groups_controller_connect_users"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_connect_users"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_connect_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループへのVC情報紐付け
    # グループにVC情報を紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_connect_vc_infos(body, id, opts = {})
      data, _status_code, _headers = groups_controller_connect_vc_infos_with_http_info(body, id, opts)
      data
    end

    # グループへのVC情報紐付け
    # グループにVC情報を紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_connect_vc_infos_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_connect_vc_infos ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling GroupsApi.groups_controller_connect_vc_infos"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_connect_vc_infos"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/vc-infos'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_connect_vc_infos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループへのVCスキーマ紐付け
    # グループにVCスキーマを紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_connect_vc_schema(body, id, opts = {})
      data, _status_code, _headers = groups_controller_connect_vc_schema_with_http_info(body, id, opts)
      data
    end

    # グループへのVCスキーマ紐付け
    # グループにVCスキーマを紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_connect_vc_schema_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_connect_vc_schema ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling GroupsApi.groups_controller_connect_vc_schema"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_connect_vc_schema"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/vc-schemas'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_connect_vc_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループへのVP情報紐付け
    # グループにVP情報を紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_connect_vp_infos(body, id, opts = {})
      data, _status_code, _headers = groups_controller_connect_vp_infos_with_http_info(body, id, opts)
      data
    end

    # グループへのVP情報紐付け
    # グループにVP情報を紐付けます。
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_connect_vp_infos_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_connect_vp_infos ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling GroupsApi.groups_controller_connect_vp_infos"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_connect_vp_infos"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/vp-infos'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_connect_vp_infos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループ作成
    # グループ作成に成功しました。
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_create(body, opts = {})
      data, _status_code, _headers = groups_controller_create_with_http_info(body, opts)
      data
    end

    # グループ作成
    # グループ作成に成功しました。
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling GroupsApi.groups_controller_create"
      end
      # resource path
      local_var_path = '/api/v1/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループのDID情報紐付け解除
    # グループに紐付いたDID情報の紐付けを解除します。
    # @param id 
    # @param did_info_id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_disconnect_did_info(id, did_info_id, opts = {})
      data, _status_code, _headers = groups_controller_disconnect_did_info_with_http_info(id, did_info_id, opts)
      data
    end

    # グループのDID情報紐付け解除
    # グループに紐付いたDID情報の紐付けを解除します。
    # @param id 
    # @param did_info_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_disconnect_did_info_with_http_info(id, did_info_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_disconnect_did_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_disconnect_did_info"
      end
      # verify the required parameter 'did_info_id' is set
      if @api_client.config.client_side_validation && did_info_id.nil?
        fail ArgumentError, "Missing the required parameter 'did_info_id' when calling GroupsApi.groups_controller_disconnect_did_info"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/did-info/{did_info_id}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'did_info_id' + '}', did_info_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_disconnect_did_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループのユーザーアカウント紐付け解除
    # グループに紐付いたユーザーアカウントの紐付けを解除します。
    # @param id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_disconnect_user(id, user_id, opts = {})
      data, _status_code, _headers = groups_controller_disconnect_user_with_http_info(id, user_id, opts)
      data
    end

    # グループのユーザーアカウント紐付け解除
    # グループに紐付いたユーザーアカウントの紐付けを解除します。
    # @param id 
    # @param user_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_disconnect_user_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_disconnect_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_disconnect_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling GroupsApi.groups_controller_disconnect_user"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/user/{user_id}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'user_id' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_disconnect_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループのVC情報紐付け解除
    # グループに紐付いたVC情報の紐付けを解除します。
    # @param id 
    # @param vc_info_id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_disconnect_vc_info(id, vc_info_id, opts = {})
      data, _status_code, _headers = groups_controller_disconnect_vc_info_with_http_info(id, vc_info_id, opts)
      data
    end

    # グループのVC情報紐付け解除
    # グループに紐付いたVC情報の紐付けを解除します。
    # @param id 
    # @param vc_info_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_disconnect_vc_info_with_http_info(id, vc_info_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_disconnect_vc_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_disconnect_vc_info"
      end
      # verify the required parameter 'vc_info_id' is set
      if @api_client.config.client_side_validation && vc_info_id.nil?
        fail ArgumentError, "Missing the required parameter 'vc_info_id' when calling GroupsApi.groups_controller_disconnect_vc_info"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/vc-info/{vc_info_id}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'vc_info_id' + '}', vc_info_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_disconnect_vc_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループのVCスキーマ紐付け解除
    # グループに紐付いたVCスキーマの紐付けを解除します。
    # @param id 
    # @param vc_schema_id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_disconnect_vc_schema(id, vc_schema_id, opts = {})
      data, _status_code, _headers = groups_controller_disconnect_vc_schema_with_http_info(id, vc_schema_id, opts)
      data
    end

    # グループのVCスキーマ紐付け解除
    # グループに紐付いたVCスキーマの紐付けを解除します。
    # @param id 
    # @param vc_schema_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_disconnect_vc_schema_with_http_info(id, vc_schema_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_disconnect_vc_schema ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_disconnect_vc_schema"
      end
      # verify the required parameter 'vc_schema_id' is set
      if @api_client.config.client_side_validation && vc_schema_id.nil?
        fail ArgumentError, "Missing the required parameter 'vc_schema_id' when calling GroupsApi.groups_controller_disconnect_vc_schema"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/vc-schema/{vc_schema_id}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'vc_schema_id' + '}', vc_schema_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_disconnect_vc_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループのVP情報紐付け解除
    # グループに紐付いたVP情報の紐付けを解除します。
    # @param id 
    # @param vp_info_id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_disconnect_vp_info(id, vp_info_id, opts = {})
      data, _status_code, _headers = groups_controller_disconnect_vp_info_with_http_info(id, vp_info_id, opts)
      data
    end

    # グループのVP情報紐付け解除
    # グループに紐付いたVP情報の紐付けを解除します。
    # @param id 
    # @param vp_info_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_disconnect_vp_info_with_http_info(id, vp_info_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_disconnect_vp_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_disconnect_vp_info"
      end
      # verify the required parameter 'vp_info_id' is set
      if @api_client.config.client_side_validation && vp_info_id.nil?
        fail ArgumentError, "Missing the required parameter 'vp_info_id' when calling GroupsApi.groups_controller_disconnect_vp_info"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}/vp-info/{vp_info_id}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'vp_info_id' + '}', vp_info_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_disconnect_vp_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループ一覧取得
    # グループを一覧として値を返します。
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :page (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
    # @option opts [BigDecimal] :limit (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
    # @option opts [String] :name (任意)グループの名前。 例: \&quot;Group Project1\&quot;
    # @option opts [String] :status (任意)グループのステータス。 例: \&quot;active\&quot;
    # @return [GroupsResponseDto]
    def groups_controller_find_all(opts = {})
      data, _status_code, _headers = groups_controller_find_all_with_http_info(opts)
      data
    end

    # グループ一覧取得
    # グループを一覧として値を返します。
    # @param [Hash] opts the optional parameters
    # @option opts [BigDecimal] :page (必須) ページネーションを表示する際のページ数に当たるクエリパラメーター。全件取得する際は1を指定。(デフォルト: 1)
    # @option opts [BigDecimal] :limit (必須) ページネーションを表示する際のページ数あたりに表示する件数を指定するクエリパラメーター。全件取得する際は0を指定。(デフォルト: 10)
    # @option opts [String] :name (任意)グループの名前。 例: \&quot;Group Project1\&quot;
    # @option opts [String] :status (任意)グループのステータス。 例: \&quot;active\&quot;
    # @return [Array<(GroupsResponseDto, Integer, Hash)>] GroupsResponseDto data, response status code and response headers
    def groups_controller_find_all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_find_all ...'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['active', 'deactive'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of active, deactive'
      end
      # resource path
      local_var_path = '/api/v1/groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GroupsResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_find_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループ詳細取得
    # リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_find_one(id, opts = {})
      data, _status_code, _headers = groups_controller_find_one_with_http_info(id, opts)
      data
    end

    # グループ詳細取得
    # リクエストパラメータのidで指定された単一の管理者アカウントの詳細情報の値を返します。
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_find_one_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_find_one ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_find_one"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_find_one\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループ停止
    # リクエストパラメータのidで指定された単一のグループを停止します。
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def groups_controller_remove(id, opts = {})
      groups_controller_remove_with_http_info(id, opts)
      nil
    end

    # グループ停止
    # リクエストパラメータのidで指定された単一のグループを停止します。
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def groups_controller_remove_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_remove ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_remove"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # グループ更新
    # リクエストパラメータのidで指定された単一のグループ情報を更新します。
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [GroupResponseDto]
    def groups_controller_update(id, opts = {})
      data, _status_code, _headers = groups_controller_update_with_http_info(id, opts)
      data
    end

    # グループ更新
    # リクエストパラメータのidで指定された単一のグループ情報を更新します。
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupResponseDto, Integer, Hash)>] GroupResponseDto data, response status code and response headers
    def groups_controller_update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_controller_update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GroupsApi.groups_controller_update"
      end
      # resource path
      local_var_path = '/api/v1/groups/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GroupResponseDto' 

      auth_names = opts[:auth_names] || ['bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_controller_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
