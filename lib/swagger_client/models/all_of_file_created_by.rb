=begin
#iDroit Dashboard Admin API

#     これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)   

OpenAPI spec version: 0.9.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

require 'date'

module SwaggerClient
  # (必須) ファイルをアップロードしたユーザーアカウント。
  class AllOfFileCreatedBy
    # アカウントの識別子
    attr_accessor :id

    # アカウントの名前
    attr_accessor :name

    # アカウントのメールアドレス
    attr_accessor :email

    # アカウントのパスワード(8文字以上20字未満)
    attr_accessor :password

    # (必須: {default: false}) アカウントの有効化フローが必要か否か(true: 必要 /false: 不要)
    attr_accessor :need_activate_flow

    # ユーザーのアカウントステータス
    attr_accessor :status

    # アカウントのロール(admin/user/clinet)
    attr_accessor :role

    # (任意) このアカウントを作成したユーザー
    attr_accessor :created_by

    # (任意) アカウントに紐付けされたDID情報の配列
    attr_accessor :did_infos

    # (任意) アカウントに紐付けされたVC情報の配列
    attr_accessor :vc_infos

    # (任意) アカウントに紐付けされたVP情報の配列
    attr_accessor :vp_infos

    # (任意) アカウントに紐付けされたグループの配列
    attr_accessor :groups

    # (任意) ユーザーアカウントがアップロードしたファイルの配列。
    attr_accessor :user_tokens

    # (任意) このユーザーによって作成されたアカウントの配列
    attr_accessor :created_users

    # (任意) アカウントに紐付けされたVC情報の配列
    attr_accessor :created_vc_infos

    # (任意) アカウントに紐付けされたVP情報の配列
    attr_accessor :created_vp_infos

    # (任意) アカウントに作成したグループの配列
    attr_accessor :created_groups

    # (任意) アカウントが作成したDID情報の配列
    attr_accessor :created_did_infos

    # (任意) ユーザーアカウントが作成したVCスキーマの配列。
    attr_accessor :created_vc_schemas

    # (任意) ユーザーアカウントが実行した検証結果の配列。
    attr_accessor :created_verifications

    # (任意) Admin権限アカウントが送信したメールの配列(Adminロール以外の場合、関係のないカラム)
    attr_accessor :created_mails

    # (任意) ユーザーアカウントがアップロードしたファイルの配列。
    attr_accessor :created_files

    # ユーザーアカウントの作成日時
    attr_accessor :created_at

    # ユーザーアカウントの更新日時
    attr_accessor :updated_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'email' => :'email',
        :'password' => :'password',
        :'need_activate_flow' => :'needActivateFlow',
        :'status' => :'status',
        :'role' => :'role',
        :'created_by' => :'createdBy',
        :'did_infos' => :'didInfos',
        :'vc_infos' => :'vcInfos',
        :'vp_infos' => :'vpInfos',
        :'groups' => :'groups',
        :'user_tokens' => :'userTokens',
        :'created_users' => :'createdUsers',
        :'created_vc_infos' => :'createdVcInfos',
        :'created_vp_infos' => :'createdVpInfos',
        :'created_groups' => :'createdGroups',
        :'created_did_infos' => :'createdDidInfos',
        :'created_vc_schemas' => :'createdVcSchemas',
        :'created_verifications' => :'createdVerifications',
        :'created_mails' => :'createdMails',
        :'created_files' => :'createdFiles',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'',
        :'name' => :'',
        :'email' => :'',
        :'password' => :'',
        :'need_activate_flow' => :'',
        :'status' => :'',
        :'role' => :'',
        :'created_by' => :'',
        :'did_infos' => :'',
        :'vc_infos' => :'',
        :'vp_infos' => :'',
        :'groups' => :'',
        :'user_tokens' => :'',
        :'created_users' => :'',
        :'created_vc_infos' => :'',
        :'created_vp_infos' => :'',
        :'created_groups' => :'',
        :'created_did_infos' => :'',
        :'created_vc_schemas' => :'',
        :'created_verifications' => :'',
        :'created_mails' => :'',
        :'created_files' => :'',
        :'created_at' => :'',
        :'updated_at' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::AllOfFileCreatedBy` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::AllOfFileCreatedBy`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'need_activate_flow')
        self.need_activate_flow = attributes[:'need_activate_flow']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'did_infos')
        if (value = attributes[:'did_infos']).is_a?(Array)
          self.did_infos = value
        end
      end

      if attributes.key?(:'vc_infos')
        if (value = attributes[:'vc_infos']).is_a?(Array)
          self.vc_infos = value
        end
      end

      if attributes.key?(:'vp_infos')
        if (value = attributes[:'vp_infos']).is_a?(Array)
          self.vp_infos = value
        end
      end

      if attributes.key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.key?(:'user_tokens')
        if (value = attributes[:'user_tokens']).is_a?(Array)
          self.user_tokens = value
        end
      end

      if attributes.key?(:'created_users')
        if (value = attributes[:'created_users']).is_a?(Array)
          self.created_users = value
        end
      end

      if attributes.key?(:'created_vc_infos')
        if (value = attributes[:'created_vc_infos']).is_a?(Array)
          self.created_vc_infos = value
        end
      end

      if attributes.key?(:'created_vp_infos')
        if (value = attributes[:'created_vp_infos']).is_a?(Array)
          self.created_vp_infos = value
        end
      end

      if attributes.key?(:'created_groups')
        if (value = attributes[:'created_groups']).is_a?(Array)
          self.created_groups = value
        end
      end

      if attributes.key?(:'created_did_infos')
        if (value = attributes[:'created_did_infos']).is_a?(Array)
          self.created_did_infos = value
        end
      end

      if attributes.key?(:'created_vc_schemas')
        if (value = attributes[:'created_vc_schemas']).is_a?(Array)
          self.created_vc_schemas = value
        end
      end

      if attributes.key?(:'created_verifications')
        if (value = attributes[:'created_verifications']).is_a?(Array)
          self.created_verifications = value
        end
      end

      if attributes.key?(:'created_mails')
        if (value = attributes[:'created_mails']).is_a?(Array)
          self.created_mails = value
        end
      end

      if attributes.key?(:'created_files')
        if (value = attributes[:'created_files']).is_a?(Array)
          self.created_files = value
        end
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @password.nil?
        invalid_properties.push('invalid value for "password", password cannot be nil.')
      end

      if @need_activate_flow.nil?
        invalid_properties.push('invalid value for "need_activate_flow", need_activate_flow cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @role.nil?
        invalid_properties.push('invalid value for "role", role cannot be nil.')
      end

      if @user_tokens.nil?
        invalid_properties.push('invalid value for "user_tokens", user_tokens cannot be nil.')
      end

      if @created_vc_schemas.nil?
        invalid_properties.push('invalid value for "created_vc_schemas", created_vc_schemas cannot be nil.')
      end

      if @created_verifications.nil?
        invalid_properties.push('invalid value for "created_verifications", created_verifications cannot be nil.')
      end

      if @created_files.nil?
        invalid_properties.push('invalid value for "created_files", created_files cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if @email.nil?
      return false if @password.nil?
      return false if @need_activate_flow.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('', ['inactive', 'activating', 'active', 'deactive'])
      return false unless status_validator.valid?(@status)
      return false if @role.nil?
      role_validator = EnumAttributeValidator.new('', ['admin', 'user', 'client'])
      return false unless role_validator.valid?(@role)
      return false if @user_tokens.nil?
      return false if @created_vc_schemas.nil?
      return false if @created_verifications.nil?
      return false if @created_files.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('', ['inactive', 'activating', 'active', 'deactive'])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] role Object to be assigned
    def role=(role)
      validator = EnumAttributeValidator.new('', ['admin', 'user', 'client'])
      unless validator.valid?(role)
        fail ArgumentError, "invalid value for \"role\", must be one of #{validator.allowable_values}."
      end
      @role = role
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          email == o.email &&
          password == o.password &&
          need_activate_flow == o.need_activate_flow &&
          status == o.status &&
          role == o.role &&
          created_by == o.created_by &&
          did_infos == o.did_infos &&
          vc_infos == o.vc_infos &&
          vp_infos == o.vp_infos &&
          groups == o.groups &&
          user_tokens == o.user_tokens &&
          created_users == o.created_users &&
          created_vc_infos == o.created_vc_infos &&
          created_vp_infos == o.created_vp_infos &&
          created_groups == o.created_groups &&
          created_did_infos == o.created_did_infos &&
          created_vc_schemas == o.created_vc_schemas &&
          created_verifications == o.created_verifications &&
          created_mails == o.created_mails &&
          created_files == o.created_files &&
          created_at == o.created_at &&
          updated_at == o.updated_at && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, email, password, need_activate_flow, status, role, created_by, did_infos, vc_infos, vp_infos, groups, user_tokens, created_users, created_vc_infos, created_vp_infos, created_groups, created_did_infos, created_vc_schemas, created_verifications, created_mails, created_files, created_at, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
